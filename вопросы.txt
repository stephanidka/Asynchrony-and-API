1.Опишите разницу между синхронными и асинхронными функциями.
Синхронные функции выполняются одна за другой по порядку, а асинхронные выполняются вне очереди и могут выполняться одновременно с синхронными.

2.Сравните подходы работы с асинхронным кодом:  сallbacks vs promises vs async / await

коллбэки довольно громоздкие и у них нет нормальной обработки ошибок, но они хороши, если надо обеспечить работу на старых браузерах.
промисы более удобные, легко создавать последовательные операции, обрабатывать ошибки. Async/Await еще более удобная, боее чистый синтаксис, обработка ошибок вообще больше похожа на синхронный код. Но промисы и особенно Async/Await требуют более новых версий JS.

3.Что такое цикл событий (event loop) в JS ?
Это замечательная концепция в асинхронном коде, которая позволяет эффективно обрабатывать события и асинхронные операции.Еvent loop обрабатывает события, такие как таймеры, сетевые запросы и обработчики промисовТем самым делает так чтобы не было зависаний.

4.Какая разница между «стеком вызовов» (call stack) и «очередью задач» (task queue)?
стек вызовов отвечает за управление вызовами функций, а очередь задач - за управление асинхронными операциями. Когда стек вызовов пуст, JavaScript проверяет очередь задач и, если там есть задачи, перемещает их в стек вызовов для выполнения.

5.Какие версии HTTP-протокола вам известны?

HTTP/1.1
HTTP/2

6.Какие знаете коды ответа (состояния) HTTP?
Я точно знаю что 200 это хорошо, вообще с 200 по 299 - значит окей. с 400-499 - ошибка на слиентской стороне, 500-599 - на серверной.

7.Как клиент взаимодействует с сервером?
Через сеть, например интернет, с помощью сетевых протоколов, в которых определены язык и правила общения. Клиент отправляет запрос, а сервер возвращает ответ.

8.Самостоятельно разберитесь, что такое Cross-Origin Resource Sharing? Как устранить проблемы с CORS?
Это браузерный механизм, который позволяет запрашивать ресурсы с другого домена, чем тот который предоставил саму веб-страницу.

устраняют проблемы с CORS путём добавления заголовков на сервере, использование прокси-сервера, использование CORS Anywhere: внешний прокси-сервер, который сам добавляет CORS-заголовки. Еще использование JSONP, но это только для GET-запросов.

9.Самостоятельно разберитесь, что такое REST?
REST — Representational State Transfer это набор правил, как программисту строить архитектуру приложений для для того чтобы они были более производительными и чтобы все системы легко обменивались данными.

10.Как посмотреть заголовки запроса к странице или API?
F12, консоль, запросы - там будут заголовки.
Но мне еще понравилось что можно сходить на отдельный сайт, там вбить страницу, где надо посмотреть заголовки и сайт выдаст их.

11.Что можно писать в параметре заголовков Content-Type ?
Content-Type указывает тип и кодировку документа. Типов семь, вроде как: "application", "audio", "image", "message", "multipart", "text", "video". И кодировок к ним множество. 

12.Давайте отправим информацию о собачке в API по адресу localhost/pets/add 
JSON с информацией о собаке:
{
		"breed": "Beagle",
		"size": "large",
		"color": "orange",
		"age": 6
	}
Как будет выглядеть `fetch` в таком случае?

fetch('localhost/pets/add', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(dogInfo) //предположим у нас есть такой объект
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));